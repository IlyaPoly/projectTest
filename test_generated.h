// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_TEST_MYDATA_H_
#define FLATBUFFERS_GENERATED_TEST_MYDATA_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 5 &&
              FLATBUFFERS_VERSION_REVISION == 26,
             "Non-compatible flatbuffers version included");

namespace MyData {

struct Data;
struct DataBuilder;

struct Data FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef DataBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME = 4,
    VT_VERSION = 6,
    VT_SN = 8,
    VT_ABOUT = 10
  };
  const ::flatbuffers::String *name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NAME);
  }
  const ::flatbuffers::String *version() const {
    return GetPointer<const ::flatbuffers::String *>(VT_VERSION);
  }
  int32_t sn() const {
    return GetField<int32_t>(VT_SN, 0);
  }
  const ::flatbuffers::String *about() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ABOUT);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyOffset(verifier, VT_VERSION) &&
           verifier.VerifyString(version()) &&
           VerifyField<int32_t>(verifier, VT_SN, 4) &&
           VerifyOffset(verifier, VT_ABOUT) &&
           verifier.VerifyString(about()) &&
           verifier.EndTable();
  }
};

struct DataBuilder {
  typedef Data Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_name(::flatbuffers::Offset<::flatbuffers::String> name) {
    fbb_.AddOffset(Data::VT_NAME, name);
  }
  void add_version(::flatbuffers::Offset<::flatbuffers::String> version) {
    fbb_.AddOffset(Data::VT_VERSION, version);
  }
  void add_sn(int32_t sn) {
    fbb_.AddElement<int32_t>(Data::VT_SN, sn, 0);
  }
  void add_about(::flatbuffers::Offset<::flatbuffers::String> about) {
    fbb_.AddOffset(Data::VT_ABOUT, about);
  }
  explicit DataBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Data> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Data>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Data> CreateData(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> name = 0,
    ::flatbuffers::Offset<::flatbuffers::String> version = 0,
    int32_t sn = 0,
    ::flatbuffers::Offset<::flatbuffers::String> about = 0) {
  DataBuilder builder_(_fbb);
  builder_.add_about(about);
  builder_.add_sn(sn);
  builder_.add_version(version);
  builder_.add_name(name);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Data> CreateDataDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    const char *version = nullptr,
    int32_t sn = 0,
    const char *about = nullptr) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto version__ = version ? _fbb.CreateString(version) : 0;
  auto about__ = about ? _fbb.CreateString(about) : 0;
  return MyData::CreateData(
      _fbb,
      name__,
      version__,
      sn,
      about__);
}

inline const MyData::Data *GetData(const void *buf) {
  return ::flatbuffers::GetRoot<MyData::Data>(buf);
}

inline const MyData::Data *GetSizePrefixedData(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<MyData::Data>(buf);
}

inline bool VerifyDataBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<MyData::Data>(nullptr);
}

inline bool VerifySizePrefixedDataBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<MyData::Data>(nullptr);
}

inline void FinishDataBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<MyData::Data> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedDataBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<MyData::Data> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace MyData

#endif  // FLATBUFFERS_GENERATED_TEST_MYDATA_H_
